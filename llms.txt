# InvoicePe - LLM Documentation Standard
# Following llmstxt.org specification for AI-friendly documentation

## Project Overview
InvoicePe is India's revolutionary B2B payment solution that converts credit card payments to instant bank transfers, solving the â‚¹182.84 trillion delayed payment problem.

## Core Architecture
- **Frontend**: Flutter 3.32.6 + Riverpod state management
- **Backend**: Supabase PostgreSQL 17 + Edge Functions
- **Payments**: PhonePe SDK 3.0.0 with mock mode for testing
- **Security**: PCI DSS SAQ-A compliant with AES-256-GCM encryption

## Key Features
1. **Quick Payment**: Credit card â†’ bank transfer in <20 seconds
2. **Vendor Management**: CRUD operations with zero onboarding
3. **Transaction History**: Real-time sync with dashboard metrics
4. **Invoice Management**: PDF generation and tracking
5. **Card Management**: Secure tokenization and storage

## Development Status
- âœ… Core functionality complete and tested
- âœ… Authentication system with phone OTP
- âœ… Payment flow with mock mode
- âœ… Database logging and monitoring
- ðŸ”„ APK size optimization (current: 153MB, target: <8MB)
- ðŸ”„ Keyboard input issues on emulator

## Critical Files
- `lib/main.dart` - App entry point with initialization
- `lib/core/services/payment_service.dart` - Payment processing logic
- `lib/core/services/auth_service.dart` - Authentication handling
- `lib/features/payment/presentation/screens/quick_payment_screen.dart` - Main payment UI
- `docs/AGENT_CONTEXT_MAP.md` - Complete LLM navigation guide

## Environment Configuration
- `.env` - Environment variables (Supabase, PhonePe credentials)
- `android/app/build.gradle.kts` - Android build configuration
- `pubspec.yaml` - Flutter dependencies and versions

## Testing
- Mock payment mode enabled for safe testing
- Integration tests with Patrol framework
- Real device testing recommended for keyboard functionality

## Build Commands
- `flutter build apk --debug` - Demo build (current: 153MB)
- `flutter build apk --release` - Optimized build (in progress)
- `.\build_demo.ps1` - Automated build script with validation

## Documentation Structure
All documentation follows Elon-standard principles:
- Single source of truth in `docs/` folder
- LLM-optimized with decision trees and code patterns
- Auto-sync with git hooks for consistency
- Hierarchical information: summary â†’ details â†’ implementation

## Support
For LLM agents: Start with `docs/AGENT_CONTEXT_MAP.md` for complete project navigation and decision trees.
